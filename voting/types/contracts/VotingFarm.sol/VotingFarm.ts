/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VotingFarmInterface extends utils.Interface {
  functions: {
    "HEC()": FunctionFragment;
    "MIN_HEC_FOR_VERIFY()": FunctionFragment;
    "addFarmForOwner(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "canVote()": FunctionFragment;
    "deprecateFarm(address)": FunctionFragment;
    "distribute(uint256,uint256)": FunctionFragment;
    "distributeDelay()": FunctionFragment;
    "fNFT()": FunctionFragment;
    "farmStatus(address)": FunctionFragment;
    "farmVote(address,uint256)": FunctionFragment;
    "farmWeights(address)": FunctionFragment;
    "getFarms()": FunctionFragment;
    "getWeightByUser(address)": FunctionFragment;
    "hasDistributed(address)": FunctionFragment;
    "lastDistribute()": FunctionFragment;
    "lastVote(address)": FunctionFragment;
    "length()": FunctionFragment;
    "lockFarm()": FunctionFragment;
    "lockedBalance()": FunctionFragment;
    "lockedTotalWeight()": FunctionFragment;
    "preDistribute()": FunctionFragment;
    "reset()": FunctionFragment;
    "resurrectFarm(address)": FunctionFragment;
    "revote(address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "usedWeights(address)": FunctionFragment;
    "vote(address[],uint256[])": FunctionFragment;
    "voteDelay()": FunctionFragment;
    "votes(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "HEC"
      | "MIN_HEC_FOR_VERIFY"
      | "addFarmForOwner"
      | "admin"
      | "canVote"
      | "deprecateFarm"
      | "distribute"
      | "distributeDelay"
      | "fNFT"
      | "farmStatus"
      | "farmVote"
      | "farmWeights"
      | "getFarms"
      | "getWeightByUser"
      | "hasDistributed"
      | "lastDistribute"
      | "lastVote"
      | "length"
      | "lockFarm"
      | "lockedBalance"
      | "lockedTotalWeight"
      | "preDistribute"
      | "reset"
      | "resurrectFarm"
      | "revote"
      | "setAdmin"
      | "totalWeight"
      | "usedWeights"
      | "vote"
      | "voteDelay"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "HEC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_HEC_FOR_VERIFY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFarmForOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "canVote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deprecateFarm",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "farmStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "farmVote",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "farmWeights",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getFarms", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWeightByUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDistributed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastDistribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastVote",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockFarm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedTotalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preDistribute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resurrectFarm",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revote",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usedWeights",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "voteDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "HEC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_HEC_FOR_VERIFY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFarmForOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deprecateFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farmVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "farmWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFarms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWeightByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockFarm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedTotalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resurrectFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {
    "FarmAddedByOwner(address)": EventFragment;
    "FarmDeprecated(address)": EventFragment;
    "FarmResurrected(address)": EventFragment;
    "FarmVoted(address)": EventFragment;
    "PreDistributed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FarmAddedByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmResurrected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreDistributed"): EventFragment;
}

export interface FarmAddedByOwnerEventObject {
  tokenLP: string;
}
export type FarmAddedByOwnerEvent = TypedEvent<
  [string],
  FarmAddedByOwnerEventObject
>;

export type FarmAddedByOwnerEventFilter =
  TypedEventFilter<FarmAddedByOwnerEvent>;

export interface FarmDeprecatedEventObject {
  tokenLP: string;
}
export type FarmDeprecatedEvent = TypedEvent<
  [string],
  FarmDeprecatedEventObject
>;

export type FarmDeprecatedEventFilter = TypedEventFilter<FarmDeprecatedEvent>;

export interface FarmResurrectedEventObject {
  tokenLP: string;
}
export type FarmResurrectedEvent = TypedEvent<
  [string],
  FarmResurrectedEventObject
>;

export type FarmResurrectedEventFilter = TypedEventFilter<FarmResurrectedEvent>;

export interface FarmVotedEventObject {
  owner: string;
}
export type FarmVotedEvent = TypedEvent<[string], FarmVotedEventObject>;

export type FarmVotedEventFilter = TypedEventFilter<FarmVotedEvent>;

export interface PreDistributedEventObject {
  spiritRewards: BigNumber;
}
export type PreDistributedEvent = TypedEvent<
  [BigNumber],
  PreDistributedEventObject
>;

export type PreDistributedEventFilter = TypedEventFilter<PreDistributedEvent>;

export interface VotingFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingFarmInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HEC(overrides?: CallOverrides): Promise<[string]>;

    MIN_HEC_FOR_VERIFY(overrides?: CallOverrides): Promise<[BigNumber]>;

    addFarmForOwner(
      _tokenLP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    canVote(overrides?: CallOverrides): Promise<[boolean]>;

    deprecateFarm(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distribute(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    fNFT(overrides?: CallOverrides): Promise<[string]>;

    farmStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    farmVote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    farmWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFarms(overrides?: CallOverrides): Promise<[string[]]>;

    getWeightByUser(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasDistributed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastDistribute(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastVote(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockFarm(overrides?: CallOverrides): Promise<[string]>;

    lockedBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedTotalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    preDistribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reset(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resurrectFarm(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revote(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    usedWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote(
      _farmVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  HEC(overrides?: CallOverrides): Promise<string>;

  MIN_HEC_FOR_VERIFY(overrides?: CallOverrides): Promise<BigNumber>;

  addFarmForOwner(
    _tokenLP: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  canVote(overrides?: CallOverrides): Promise<boolean>;

  deprecateFarm(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distribute(
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeDelay(overrides?: CallOverrides): Promise<BigNumber>;

  fNFT(overrides?: CallOverrides): Promise<string>;

  farmStatus(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  farmVote(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  farmWeights(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFarms(overrides?: CallOverrides): Promise<string[]>;

  getWeightByUser(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasDistributed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastDistribute(overrides?: CallOverrides): Promise<BigNumber>;

  lastVote(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  lockFarm(overrides?: CallOverrides): Promise<string>;

  lockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

  lockedTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  preDistribute(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reset(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resurrectFarm(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revote(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  usedWeights(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vote(
    _farmVote: PromiseOrValue<string>[],
    _weights: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteDelay(overrides?: CallOverrides): Promise<BigNumber>;

  votes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    HEC(overrides?: CallOverrides): Promise<string>;

    MIN_HEC_FOR_VERIFY(overrides?: CallOverrides): Promise<BigNumber>;

    addFarmForOwner(
      _tokenLP: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    canVote(overrides?: CallOverrides): Promise<boolean>;

    deprecateFarm(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    distribute(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    fNFT(overrides?: CallOverrides): Promise<string>;

    farmStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    farmVote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    farmWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFarms(overrides?: CallOverrides): Promise<string[]>;

    getWeightByUser(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDistributed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastDistribute(overrides?: CallOverrides): Promise<BigNumber>;

    lastVote(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    lockFarm(overrides?: CallOverrides): Promise<string>;

    lockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lockedTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    preDistribute(overrides?: CallOverrides): Promise<void>;

    reset(overrides?: CallOverrides): Promise<void>;

    resurrectFarm(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revote(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    usedWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _farmVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    voteDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FarmAddedByOwner(address)"(tokenLP?: null): FarmAddedByOwnerEventFilter;
    FarmAddedByOwner(tokenLP?: null): FarmAddedByOwnerEventFilter;

    "FarmDeprecated(address)"(tokenLP?: null): FarmDeprecatedEventFilter;
    FarmDeprecated(tokenLP?: null): FarmDeprecatedEventFilter;

    "FarmResurrected(address)"(tokenLP?: null): FarmResurrectedEventFilter;
    FarmResurrected(tokenLP?: null): FarmResurrectedEventFilter;

    "FarmVoted(address)"(owner?: null): FarmVotedEventFilter;
    FarmVoted(owner?: null): FarmVotedEventFilter;

    "PreDistributed(uint256)"(spiritRewards?: null): PreDistributedEventFilter;
    PreDistributed(spiritRewards?: null): PreDistributedEventFilter;
  };

  estimateGas: {
    HEC(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_HEC_FOR_VERIFY(overrides?: CallOverrides): Promise<BigNumber>;

    addFarmForOwner(
      _tokenLP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    canVote(overrides?: CallOverrides): Promise<BigNumber>;

    deprecateFarm(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distribute(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeDelay(overrides?: CallOverrides): Promise<BigNumber>;

    fNFT(overrides?: CallOverrides): Promise<BigNumber>;

    farmStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmVote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFarms(overrides?: CallOverrides): Promise<BigNumber>;

    getWeightByUser(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDistributed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastDistribute(overrides?: CallOverrides): Promise<BigNumber>;

    lastVote(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    lockFarm(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lockedTotalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    preDistribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reset(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resurrectFarm(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revote(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    usedWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _farmVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteDelay(overrides?: CallOverrides): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    HEC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_HEC_FOR_VERIFY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFarmForOwner(
      _tokenLP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canVote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deprecateFarm(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distribute(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    farmStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmVote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFarms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWeightByUser(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDistributed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDistribute(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastVote(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockFarm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedTotalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preDistribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reset(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resurrectFarm(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revote(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usedWeights(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      _farmVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
